/* eslint-disable */
/**
 * Generated by orval üç∫
 * Do not edit manually.
 * Chained Notes API
 * An application for chained notes.
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  Note,
  NoteRequest,
  PatchedNoteRequest,
} from "./chainedNotesAPI.schemas";
import { customInstance } from "../orval/custom-axios-instance";
import type { ErrorType, BodyType } from "../orval/custom-axios-instance";

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const notesList = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<Note[]>(
    { url: `/api/notes/`, method: "GET", signal },
    options,
  );
};

export const getNotesListQueryKey = () => {
  return [`/api/notes/`] as const;
};

export const getNotesListQueryOptions = <
  TData = Awaited<ReturnType<typeof notesList>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof notesList>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getNotesListQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof notesList>>> = ({
    signal,
  }) => notesList(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof notesList>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type NotesListQueryResult = NonNullable<
  Awaited<ReturnType<typeof notesList>>
>;
export type NotesListQueryError = ErrorType<unknown>;

export function useNotesList<
  TData = Awaited<ReturnType<typeof notesList>>,
  TError = ErrorType<unknown>,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof notesList>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof notesList>>,
        TError,
        TData
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customInstance>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useNotesList<
  TData = Awaited<ReturnType<typeof notesList>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof notesList>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof notesList>>,
        TError,
        TData
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useNotesList<
  TData = Awaited<ReturnType<typeof notesList>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof notesList>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useNotesList<
  TData = Awaited<ReturnType<typeof notesList>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof notesList>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getNotesListQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const notesCreate = (
  noteRequest: BodyType<NoteRequest>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<Note>(
    {
      url: `/api/notes/`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: noteRequest,
    },
    options,
  );
};

export const getNotesCreateMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof notesCreate>>,
    TError,
    { data: BodyType<NoteRequest> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof notesCreate>>,
  TError,
  { data: BodyType<NoteRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof notesCreate>>,
    { data: BodyType<NoteRequest> }
  > = (props) => {
    const { data } = props ?? {};

    return notesCreate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type NotesCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof notesCreate>>
>;
export type NotesCreateMutationBody = BodyType<NoteRequest>;
export type NotesCreateMutationError = ErrorType<unknown>;

export const useNotesCreate = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof notesCreate>>,
    TError,
    { data: BodyType<NoteRequest> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof notesCreate>>,
  TError,
  { data: BodyType<NoteRequest> },
  TContext
> => {
  const mutationOptions = getNotesCreateMutationOptions(options);

  return useMutation(mutationOptions);
};

export const notesRetrieve = (
  id: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<Note>(
    { url: `/api/notes/${id}/`, method: "GET", signal },
    options,
  );
};

export const getNotesRetrieveQueryKey = (id: number) => {
  return [`/api/notes/${id}/`] as const;
};

export const getNotesRetrieveQueryOptions = <
  TData = Awaited<ReturnType<typeof notesRetrieve>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof notesRetrieve>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getNotesRetrieveQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof notesRetrieve>>> = ({
    signal,
  }) => notesRetrieve(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof notesRetrieve>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type NotesRetrieveQueryResult = NonNullable<
  Awaited<ReturnType<typeof notesRetrieve>>
>;
export type NotesRetrieveQueryError = ErrorType<unknown>;

export function useNotesRetrieve<
  TData = Awaited<ReturnType<typeof notesRetrieve>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof notesRetrieve>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof notesRetrieve>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useNotesRetrieve<
  TData = Awaited<ReturnType<typeof notesRetrieve>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof notesRetrieve>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof notesRetrieve>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useNotesRetrieve<
  TData = Awaited<ReturnType<typeof notesRetrieve>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof notesRetrieve>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useNotesRetrieve<
  TData = Awaited<ReturnType<typeof notesRetrieve>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof notesRetrieve>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getNotesRetrieveQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const notesUpdate = (
  id: number,
  noteRequest: BodyType<NoteRequest>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<Note>(
    {
      url: `/api/notes/${id}/`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: noteRequest,
    },
    options,
  );
};

export const getNotesUpdateMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof notesUpdate>>,
    TError,
    { id: number; data: BodyType<NoteRequest> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof notesUpdate>>,
  TError,
  { id: number; data: BodyType<NoteRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof notesUpdate>>,
    { id: number; data: BodyType<NoteRequest> }
  > = (props) => {
    const { id, data } = props ?? {};

    return notesUpdate(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type NotesUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof notesUpdate>>
>;
export type NotesUpdateMutationBody = BodyType<NoteRequest>;
export type NotesUpdateMutationError = ErrorType<unknown>;

export const useNotesUpdate = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof notesUpdate>>,
    TError,
    { id: number; data: BodyType<NoteRequest> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof notesUpdate>>,
  TError,
  { id: number; data: BodyType<NoteRequest> },
  TContext
> => {
  const mutationOptions = getNotesUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};

export const notesPartialUpdate = (
  id: number,
  patchedNoteRequest: BodyType<PatchedNoteRequest>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<Note>(
    {
      url: `/api/notes/${id}/`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: patchedNoteRequest,
    },
    options,
  );
};

export const getNotesPartialUpdateMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof notesPartialUpdate>>,
    TError,
    { id: number; data: BodyType<PatchedNoteRequest> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof notesPartialUpdate>>,
  TError,
  { id: number; data: BodyType<PatchedNoteRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof notesPartialUpdate>>,
    { id: number; data: BodyType<PatchedNoteRequest> }
  > = (props) => {
    const { id, data } = props ?? {};

    return notesPartialUpdate(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type NotesPartialUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof notesPartialUpdate>>
>;
export type NotesPartialUpdateMutationBody = BodyType<PatchedNoteRequest>;
export type NotesPartialUpdateMutationError = ErrorType<unknown>;

export const useNotesPartialUpdate = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof notesPartialUpdate>>,
    TError,
    { id: number; data: BodyType<PatchedNoteRequest> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof notesPartialUpdate>>,
  TError,
  { id: number; data: BodyType<PatchedNoteRequest> },
  TContext
> => {
  const mutationOptions = getNotesPartialUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};

export const notesDestroy = (
  id: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    { url: `/api/notes/${id}/`, method: "DELETE" },
    options,
  );
};

export const getNotesDestroyMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof notesDestroy>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof notesDestroy>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof notesDestroy>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return notesDestroy(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type NotesDestroyMutationResult = NonNullable<
  Awaited<ReturnType<typeof notesDestroy>>
>;

export type NotesDestroyMutationError = ErrorType<unknown>;

export const useNotesDestroy = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof notesDestroy>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof notesDestroy>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getNotesDestroyMutationOptions(options);

  return useMutation(mutationOptions);
};
